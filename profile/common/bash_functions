#!/bin/bash
# shellcheck disable=SC1004,1090
#set -o xtrace
set -o pipefail
set -o nounset
set -o errexit

source "profile/${NAME}/bash_functions"

WRTLAB_PROXY_URL_LIBVIRT="http://${WRTLAB_WAN_GW}:3128"
WRTLAB_PROXY_URL_DOCKER="http://${HOSTNAME}:3128"
WRTLAB_PROXY_FEDORA_MAIN="http://fedora.mirrorservice.org/fedora"
WRTLAB_PROXY_FEDORA_CODECS="http://codecs.fedoraproject.org/openh264"

WRTLAB_SCRIPTS=("run.sh" "builder/run.sh" "builder/bootstrap.sh")

function env_create () {
  pwd
  mkdir -pv "tmp/${NAME}"
}

function env_remove () {
  pwd
  if [ -d "tmp/${NAME}" ]; then rm -rv "tmp/${NAME}"; fi
}

function build_container () {
  if ! docker inspect --type=image "wrtlab:${WRTLAB_VERSION}" > /dev/null; then
    env_create

    cp -rv builder/ "tmp/${NAME}"
    bake_vars
    cd "tmp/${NAME}/builder/"
    docker build -t "wrtlab:${WRTLAB_VERSION}" . >/dev/null
    docker images "wrtlab:${WRTLAB_VERSION}"
    cd ../../..

    env_remove
  fi
}

function bake_vars () {
  #FYI https://unix.stackexchange.com/questions/330660/prevent-grep-from-exiting-in-case-of-nomatch
  grep -R -l __NAME__ 				"tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__NAME__%${NAME}%g"                                              || [[ $? == 1 ]]
  grep -R -l __WRTLAB_VERSION__			"tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_VERSION__%${WRTLAB_VERSION}%g"                          || [[ $? == 1 ]]

  grep -R -l __WRTLAB_WAN_IF__ 			"tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_WAN_IF__%${WRTLAB_WAN_IF}%g"                            || [[ $? == 1 ]]
  grep -R -l __WRTLAB_WAN_IP__                  "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_WAN_IP__%${WRTLAB_WAN_IP}%g"                            || [[ $? == 1 ]]
  grep -R -l __WRTLAB_WAN_MASK__                "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_WAN_MASK__%${WRTLAB_WAN_MASK}%g"                        || [[ $? == 1 ]]
  grep -R -l __WRTLAB_WAN_GW__                  "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_WAN_GW__%${WRTLAB_WAN_GW}%g"                            || [[ $? == 1 ]]
  grep -R -l __WRTLAB_WAN_DNS__                 "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_WAN_DNS__%${WRTLAB_WAN_DNS}%g"                          || [[ $? == 1 ]]

  grep -R -l __WRTLAB_VPN_NET__                 "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_VPN_NET__%${WRTLAB_VPN_NET}%g"                          || [[ $? == 1 ]]
  grep -R -l __WRTLAB_VPN_IP__                  "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_VPN_IP__%${WRTLAB_VPN_IP}%g"                            || [[ $? == 1 ]]
  grep -R -l __WRTLAB_VPN_MASK_SHORT__          "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_VPN_MASK_SHORT__%${WRTLAB_VPN_MASK_SHORT}%g"            || [[ $? == 1 ]]
  grep -R -l __WRTLAB_VPN_PORT__                "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s/__WRTLAB_VPN_PORT__/${WRTLAB_VPN_PORT}/g"                        || [[ $? == 1 ]]
  grep -R -l __WRTLAB_VPN_PORT_HIDDEN__         "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s/__WRTLAB_VPN_PORT_HIDDEN__/${WRTLAB_VPN_PORT_HIDDEN}/g"          || [[ $? == 1 ]]

  grep -R -l __WRTLAB_TEST_VPN_IP__             "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_TEST_VPN_IP__%${WRTLAB_TEST_VPN_IP}%g"                  || [[ $? == 1 ]]
  grep -R -l __WRTLAB_TEST_VPN_GW__             "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_TEST_VPN_GW__%${WRTLAB_TEST_VPN_GW}%g"                  || [[ $? == 1 ]]
  grep -R -l __WRTLAB_TEST_VPN_NET__            "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_TEST_VPN_NET__%${WRTLAB_TEST_VPN_NET}%g"                || [[ $? == 1 ]]
  grep -R -l __WRTLAB_TEST_VPN_MASK_SHORT__     "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_TEST_VPN_MASK_SHORT__%${WRTLAB_TEST_VPN_MASK_SHORT}%g"  || [[ $? == 1 ]]

  grep -R -l __WRTLAB_PROXY_ENABLED__           "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_PROXY_ENABLED__%${WRTLAB_PROXY_ENABLED}%g"              || [[ $? == 1 ]]
  grep -R -l __WRTLAB_PROXY_URL_DOCKER__        "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_PROXY_URL_DOCKER__%${WRTLAB_PROXY_URL_DOCKER}%g"        || [[ $? == 1 ]]
  grep -R -l __WRTLAB_PROXY_URL_LIBVIRT__       "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_PROXY_URL_LIBVIRT__%${WRTLAB_PROXY_URL_LIBVIRT}%g"      || [[ $? == 1 ]]
  grep -R -l __WRTLAB_PROXY_FEDORA_MAIN__       "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_PROXY_FEDORA_MAIN__%${WRTLAB_PROXY_FEDORA_MAIN}%g"      || [[ $? == 1 ]]
  grep -R -l __WRTLAB_PROXY_FEDORA_CODECS__     "tmp/${NAME}" | xargs --no-run-if-empty sed -i "s%__WRTLAB_PROXY_FEDORA_CODECS__%${WRTLAB_PROXY_FEDORA_CODECS}%g"  || [[ $? == 1 ]]
  
  bake_vars_specific
} 

function check_system () {
  UTILITES_LIST=("expect" "docker" "virsh" "virt-install" "qemu-img")
  for UTILITY in "${UTILITES_LIST[@]}"; do
    if ! command -v "${UTILITY}" > /dev/null; then echo "${UTILITY} check error"; return 1; fi
  done

  if [ "${WRTLAB_PROXY_ENABLED}" = true ]; then
    curl -L http://downloads.openwrt.org/snapshots/targets/x86/64/version.buildinfo -s -o /dev/null -x "${WRTLAB_PROXY_URL_DOCKER}"
    curl -L http://downloads.openwrt.org/snapshots/targets/x86/64/version.buildinfo -s -o /dev/null -x "${WRTLAB_PROXY_URL_LIBVIRT}"
  fi
}

function lint () {
  find profile -type f -name 'bash_functions' -exec shellcheck "${WRTLAB_SCRIPTS[@]}" {} \+
} 

function build () {
  build_container
  env_create

  cp -rv profile/common/files/ "tmp/${NAME}/"
  cp -rv "profile/${NAME}/files/" "tmp/${NAME}/"

  mkdir -p "tmp/${NAME}/files/etc/dropbear/"
  cp -v ~/.ssh/authorized_keys "tmp/${NAME}/files/etc/dropbear/"
  chmod og-rwx "tmp/${NAME}/files/etc/dropbear/"

  bake_vars

  PACKAGES="cgi-io libiwinfo libiwinfo-data libiwinfo-lua liblua liblucihttp liblucihttp-lua libubus-lua lua luci luci-app-firewall luci-app-opkg luci-base luci-lib-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-mod-network luci-mod-status luci-mod-system luci-proto-ppp luci-ssl px5g-wolfssl rpcd rpcd-mod-file rpcd-mod-iwinfo rpcd-mod-luci rpcd-mod-rrdns uhttpd uhttpd-mod-ubus luci-app-wireguard arp-scan arp-scan-database grub2 grub2-efi kmod-fs-vfat kmod-nls-base kmod-nls-cp437 kmod-nls-iso8859-1 kmod-nls-utf8 iperf3 openssh-client-utils"
  FILES="tmp/${NAME}"

  docker run -it --rm \
  -v "${PWD}:/opt:Z" \
  --env "IMG_NAME=${NAME}" \
  --env "IMG_VERSION=${WRTLAB_VERSION}" \
  --env "IMG_FILES=${FILES}" \
  --env "IMG_PACKAGES=${PACKAGES}" \
  --env "IMG_PROXY_ENABLED=${WRTLAB_PROXY_ENABLED}" \
  --env "IMG_PROXY_URL=${WRTLAB_PROXY_URL_DOCKER}" \
  "wrtlab:${WRTLAB_VERSION}" > /dev/null
  ls -alhZ "tmp/${NAME}/img/openwrt-${WRTLAB_VERSION}-x86-64-generic-ext4-combined.img.gz"

  cd "tmp/${NAME}/img/"
  gzip -d "openwrt-${WRTLAB_VERSION}-x86-64-generic-ext4-combined.img.gz" || true
  qemu-img convert -f raw -O qcow2 "openwrt-${WRTLAB_VERSION}-x86-64-generic-ext4-combined.img" "wrtlab-${NAME}-latest.qcow2"
  cp -v "wrtlab-${NAME}-latest.qcow2" "${LIBVIRT_DIR_POOL_PATH}"
  ls -alhZ "${LIBVIRT_DIR_POOL_PATH}/wrtlab-${NAME}-latest.qcow2"
  cd ../../..

  env_remove
}

function virtnet_setup () {
  #-------------------------------------------------
  if [ "${WRTLAB_VIRT_NETWORKS_ENABLED}" = true ]; then
    if ! virsh net-info default | grep -q "Active:         yes"; then
      virsh net-start default
    fi

    if ! virsh net-dumpxml default | grep -q "<host mac='$WRTLAB_WAN_MAC' ip='$WRTLAB_WAN_IP'/>"; then
      if virsh net-dumpxml default | grep -q "host mac='$WRTLAB_WAN_MAC'"; then
        virsh net-update default modify ip-dhcp-host "<host mac='$WRTLAB_WAN_MAC' ip='$WRTLAB_WAN_IP'/>" --live --config --parent-index 0
      else
        virsh net-update default add-last ip-dhcp-host "<host mac='$WRTLAB_WAN_MAC' ip='$WRTLAB_WAN_IP'/>" --live --config --parent-index 0
      fi
    fi
    specific_virtnet_setup  
  fi
}

function test () {
  remove_vm "${NAME}"
  virtnet_setup
  run_openwrt

  # default test
  profile/common/tests/router_internal_test.exp "${NAME}"

  # specific test
  specific_test  
}

function run_openwrt () {
  if [ ! -d "$LIBVIRT_DIR_POOL_PATH" ]; then
    mkdir "$LIBVIRT_DIR_POOL_PATH" || true
    chown "${USER}:qemu" "$LIBVIRT_DIR_POOL_PATH"
    chmod g+rws "$LIBVIRT_DIR_POOL_PATH"
  fi
  cp -fv "tmp/${NAME}/img/${NAME}.qcow2" "$LIBVIRT_DIR_POOL_PATH"
  
  #osinfo-query os
  virt-install -n "${NAME}" --install no_install=yes \
   --vcpus 1 --ram 128 --video none --graphics none  \
   --osinfo linux2020 --disk path="${LIBVIRT_DIR_POOL_PATH}/${NAME}.qcow2" \
   "${WRTLAB_WAN_NETWORKS[@]}" \
   "${WRTLAB_LOCAL_NETWORKS[@]}" \
   --noautoconsole

  #virsh autostart "${NAME}"
}

function remove_vm () {
  local NAME=$1
  if virsh dominfo "${NAME}" &> /dev/null; then
    if virsh dominfo "${NAME}" | grep -q "State:          running"; then
      virsh destroy "${NAME}"
    fi
    virsh undefine "${NAME}"
  fi
}

function net_deploy () {
  local NET_NAME=$1
  local HOST_IP=$2
  local NET_MASK=$3

  if virsh net-info "${NET_NAME}"; then
    if virsh net-info "${NET_NAME}" | grep -q "Active:         yes"; then
      virsh net-destroy "${NET_NAME}"
    fi
    virsh net-undefine "${NET_NAME}"
  fi

  virsh net-define <(cat << EOF
<network>
  <name>${NET_NAME}</name>
  <bridge stp='off'/>
  <ip address='${HOST_IP}' netmask='${NET_MASK}'>
  </ip>
</network>
EOF
)
  virsh net-start "${NET_NAME}"
}

function run_alpine315_test () {
  local VM=$1
  local TEST=$2
  local NET=$3
  local MAC=$4

  if [ ! -f "${LIBVIRT_DIR_POOL_PATH}/alpine-virt-3.15.0-x86_64.iso" ]; then
    WRTLAB_PATH="$PWD"
    mkdir "$LIBVIRT_DIR_POOL_PATH" || true && cd "$LIBVIRT_DIR_POOL_PATH"
    curl -LO https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/x86_64/alpine-virt-3.15.0-x86_64.iso
    curl -LO https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/x86_64/alpine-virt-3.15.0-x86_64.iso.sha256
    sha256sum --ignore-missing -c alpine-virt-3.15.0-x86_64.iso.sha256
    rm -v alpine-virt-3.15.0-x86_64.iso.sha256
    cd "$WRTLAB_PATH"
  fi

  remove_vm "${VM}"
  virt-install -n "${VM}" --install no_install=yes \
   --vcpus 1 --ram 256 --video none --graphics none \
   --osinfo alpinelinux3.14 --disk device=cdrom,path="${LIBVIRT_DIR_POOL_PATH}/alpine-virt-3.15.0-x86_64.iso" \
   --network "network=${NET},mac=${MAC}" \
   --noautoconsole
  "tmp/${NAME}/tests/router_external_${TEST}.exp" "${VM}"
}
