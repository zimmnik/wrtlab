#!/bin/bash
# shellcheck disable=SC1004
set -o xtrace
set -o pipefail
set -o nounset
set -o errexit

function specific_build_image () {
  grep -R -l __WRTLAB_MNGT_IF__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_MNGT_IF__%${WRTLAB_MNGT_IF}%g"
  grep -R -l __WRTLAB_MNGT_IP__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_MNGT_IP__%${WRTLAB_MNGT_IP}%g"
  grep -R -l __WRTLAB_MNGT_IP_HOST__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_MNGT_IP_HOST__%${WRTLAB_MNGT_IP_HOST}%g"
  grep -R -l __WRTLAB_MNGT_MASK_LONG__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_MNGT_MASK_LONG__%${WRTLAB_MNGT_MASK_LONG}%g"

  grep -R -l __WRTLAB_HOME_IF__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_HOME_IF__%${WRTLAB_HOME_IF}%g"
  grep -R -l __WRTLAB_HOME_IP__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_HOME_IP__%${WRTLAB_HOME_IP}%g"
  grep -R -l __WRTLAB_HOME_MASK_LONG__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_HOME_MASK_LONG__%${WRTLAB_HOME_MASK_LONG}%g"

  grep -R -l __WRTLAB_DMZ_IF__ 			"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_DMZ_IF__%${WRTLAB_DMZ_IF}%g"
  grep -R -l __WRTLAB_DMZ_IP__ 			"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_DMZ_IP__%${WRTLAB_DMZ_IP}%g"
  grep -R -l __WRTLAB_DMZ_MASK_LONG__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_DMZ_MASK_LONG__%${WRTLAB_DMZ_MASK_LONG}%g"

  grep -R -l __WRTLAB_TEST_MNGT_IP__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_TEST_MNGT_IP__%${WRTLAB_TEST_MNGT_IP}%g"
  grep -R -l __WRTLAB_TEST_MNGT_MAC__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_TEST_MNGT_MAC__%${WRTLAB_TEST_MNGT_MAC}%g"

  grep -R -l __WRTLAB_TEST_HOME_IP__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_TEST_HOME_IP__%${WRTLAB_TEST_HOME_IP}%g"
  grep -R -l __WRTLAB_TEST_HOME_MAC__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_TEST_HOME_MAC__%${WRTLAB_TEST_HOME_MAC}%g"

  grep -R -l __WRTLAB_TEST_DMZ_IP__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_TEST_DMZ_IP__%${WRTLAB_TEST_DMZ_IP}%g"
  grep -R -l __WRTLAB_TEST_DMZ_MAC__ 		"tmp/${NAME}" | xargs sed -i "s%__WRTLAB_TEST_DMZ_MAC__%${WRTLAB_TEST_DMZ_MAC}%g"

}

function specific_deploy () {
  remove_vm "${NAME}_testvpn"
  remove_vm "${NAME}_testmngt"
  remove_vm "${NAME}_testhome"
  remove_vm "${NAME}_testdmz"
}

function specific_virtnet_setup () {
  net_deploy "${WRTLAB_MNGT_NAME}" "${WRTLAB_MNGT_IP_HOST}" "${WRTLAB_MNGT_MASK_LONG}"
  net_deploy "${WRTLAB_HOME_NAME}" "${WRTLAB_HOME_IP_HOST}" "${WRTLAB_HOME_MASK_LONG}"
  net_deploy "${WRTLAB_DMZ_NAME}"  "${WRTLAB_DMZ_IP_HOST}"  "${WRTLAB_DMZ_MASK_LONG}"
}

function specific_test () {
  if [ ! -f "${LIBVIRT_DIR_POOL_PATH}/Fedora-Workstation-Live-x86_64-36-1.5.iso" ]; then
    WRTLAB_PATH="$PWD"
    mkdir "$LIBVIRT_DIR_POOL_PATH" || true && cd "$LIBVIRT_DIR_POOL_PATH"
    curl -LO https://download.fedoraproject.org/pub/fedora/linux/releases/36/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-36-1.5.iso
    curl -LO https://download.fedoraproject.org/pub/fedora/linux/releases/36/Workstation/x86_64/iso/Fedora-Workstation-36-1.5-x86_64-CHECKSUM
    sha256sum --ignore-missing -c Fedora-Workstation-36-1.5-x86_64-CHECKSUM
    rm -v Fedora-Workstation-36-1.5-x86_64-CHECKSUM
    cd "$WRTLAB_PATH"
  fi

  remove_vm "${NAME}_testvpn"
  virt-install -n "${NAME}_testvpn" --install no_install=no \
   --vcpus 1 --ram 2048 --video none --graphics none \
   --osinfo linux2020 --disk none --location "${LIBVIRT_DIR_POOL_PATH}/Fedora-Workstation-Live-x86_64-36-1.5.iso" \
   --extra-args "console=ttyS0 root=live:CDLABEL=Fedora-WS-Live-36-1-5 rd.live.image systemd.unit=multi-user.target" \
   "${WRTLAB_TEST_VPN_EXT_NETWORKS[@]}" \
   --noautoconsole
  "tmp/${NAME}/tests/router_external_test_vpn.exp" "${NAME}_testvpn"

  run_alpine315_test "${NAME}_testmngt" testmngt "${WRTLAB_MNGT_NAME}" "${WRTLAB_TEST_MNGT_MAC}"
  run_alpine315_test "${NAME}_testdmz"  testdmz  "${WRTLAB_DMZ_NAME}"  "${WRTLAB_TEST_DMZ_MAC}"
  run_alpine315_test "${NAME}_testhome" testhome "${WRTLAB_HOME_NAME}" "${WRTLAB_TEST_HOME_MAC}"
}
